/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cv.and.pdf.generator;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.JOptionPane;

/**
 *
 * @author sony
 */
public class Mailcv extends javax.swing.JFrame {
final String username1 = "projectcv2sd@gmail.com";
        final String password = "cvpdfgen";
        String e,user,n,p,z;
        String regex = "^(.+)@(.+)$";


    /**
     * Creates new form Mailcv
     */
    public Mailcv() {
        initComponents();
    }
public Mailcv(String u) {
        initComponents();
        user=u;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        label1 = new java.awt.Label();
        t1 = new java.awt.TextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        button1 = new java.awt.Button();

        jLabel1.setText("jLabel1");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label1.setText("PLEASE ENTER YOUR MAIL ID");

        t1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t1ActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cv/and/pdf/generator/images.jpg"))); // NOI18N

        jButton2.setText("SEND");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        button1.setLabel("NEXT");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(85, 85, 85))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(button1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void t1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
             e=t1.getText();
if(e.length()==0)
{
    JOptionPane.showMessageDialog(this,"PLEASE ENTER THE EMAIL ID");
    return;
}
if(e.matches(regex))
{
    
}
else
{
    JOptionPane.showMessageDialog(this,"PLEASE ENTER VALID EMAIL ID");
    return;
}

        try
 {
     myconnection obj=new myconnection();
     String q="select * from tbname where user=?";
     PreparedStatement pst=obj.db.prepareStatement(q);
     pst.setString(1, user);
     ResultSet rs;
     rs=pst.executeQuery();
     if(rs.next())
     {
         n=rs.getString("name");
         p=rs.getString("pdf");
         z=rs.getString("zip");
     }
 }
 catch(SQLException e)
 {
     System.out.println(e.getMessage());
 }
Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
       props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.debug", "true");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        Session session = Session.getInstance(props,
          new javax.mail.Authenticator() {
            protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                return new javax.mail.PasswordAuthentication(username1, password);
            }
          });
        session.setDebug(true);

        try {

            Message message = new MimeMessage(session);
            message.setFrom(new 
                  InternetAddress(username1));
            message.setRecipients(Message.RecipientType.TO,
            InternetAddress.parse(e));
            message.setSubject("cv");
            message.setText("YOUR CV IS ATTACHED BELOW");
            MimeBodyPart messageBodyPart2 = new MimeBodyPart();  
  
   // String filename = "SendAttachment.java";//change accordingly  
    DataSource source = new FileDataSource(n);  
    messageBodyPart2.setDataHandler(new DataHandler(source));  
    messageBodyPart2.setFileName(n); 
    Multipart multipart = new MimeMultipart();    
    multipart.addBodyPart(messageBodyPart2);  
     message.setContent(multipart );  



            Transport.send(message);

            System.out.println("Done");
      

        } catch (MessagingException o) {
            throw new RuntimeException(o);
        }   // TODO add your handling code here:
        Properties props1 = new Properties();
        props1.put("mail.smtp.auth", "true");
       props1.put("mail.smtp.starttls.enable", "true");
        props1.put("mail.smtp.host", "smtp.gmail.com");
        props1.put("mail.smtp.debug", "true");
        props1.put("mail.smtp.port", "587");
        props1.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        Session session1 = Session.getInstance(props1,
          new javax.mail.Authenticator() {
            protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                return new javax.mail.PasswordAuthentication(username1, password);
            }
          });
        session1.setDebug(true);

        try {

            Message message = new MimeMessage(session);
            message.setFrom(new 
                  InternetAddress(username1));
            message.setRecipients(Message.RecipientType.TO,
            InternetAddress.parse(e));
            message.setSubject("cv");
            message.setText("YOUR CV IS ATTACHED BELOW");
            MimeBodyPart messageBodyPart2 = new MimeBodyPart();  
  
   // String filename = "SendAttachment.java";//change accordingly  
    DataSource source = new FileDataSource(p);  
    messageBodyPart2.setDataHandler(new DataHandler(source));  
    messageBodyPart2.setFileName(p); 
    Multipart multipart = new MimeMultipart();    
    multipart.addBodyPart(messageBodyPart2);  
     message.setContent(multipart );  



            Transport.send(message);

            System.out.println("Done");
          

        } catch (MessagingException o) {
            throw new RuntimeException(o);
        }   // TODO add your handling code here:
        Properties props2 = new Properties();
        props2.put("mail.smtp.auth", "true");
       props2.put("mail.smtp.starttls.enable", "true");
        props2.put("mail.smtp.host", "smtp.gmail.com");
        props2.put("mail.smtp.debug", "true");
        props2.put("mail.smtp.port", "587");
        props2.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        Session session2= Session.getInstance(props2,
          new javax.mail.Authenticator() {
            protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                return new javax.mail.PasswordAuthentication(username1, password);
            }
          });
        session2.setDebug(true);

        try {

            Message message = new MimeMessage(session);
            message.setFrom(new 
                  InternetAddress(username1));
            message.setRecipients(Message.RecipientType.TO,
            InternetAddress.parse(e));
            message.setSubject("cv");
            message.setText("YOUR CV IS ATTACHED BELOW");
            MimeBodyPart messageBodyPart2 = new MimeBodyPart();  
  
   // String filename = "SendAttachment.java";//change accordingly  
    DataSource source = new FileDataSource(z);  
    messageBodyPart2.setDataHandler(new DataHandler(source));  
    messageBodyPart2.setFileName(z); 
    Multipart multipart = new MimeMultipart();    
    multipart.addBodyPart(messageBodyPart2);  
     message.setContent(multipart );  



            Transport.send(message);

            System.out.println("Done");
            JOptionPane.showMessageDialog(this,"YOUR CV HAS BEEN SENT.");

        } catch (MessagingException o) {
            throw new RuntimeException(o);
        }   // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
    Feedback obj=new Feedback();
obj.setVisible(true);
this.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_button1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mailcv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mailcv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mailcv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mailcv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mailcv().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.Label label1;
    private java.awt.TextField t1;
    // End of variables declaration//GEN-END:variables
}
